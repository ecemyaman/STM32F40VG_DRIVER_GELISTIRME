
Driver_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000754  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008fc  08000904  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008fc  080008fc  00010904  2**0
                  CONTENTS
  4 .ARM          00000000  080008fc  080008fc  00010904  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008fc  08000904  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008fc  080008fc  000108fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000900  08000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010904  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010904  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00010904  2**0
                  CONTENTS, READONLY
 13 .debug_info   000034df  00000000  00000000  00010932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000853  00000000  00000000  00013e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00014668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  000147b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026e9  00000000  00000000  000148b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c3d  00000000  00000000  00016f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a152  00000000  00000000  00018bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00022d28  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000418  00000000  00000000  00022d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008e4 	.word	0x080008e4

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	080008e4 	.word	0x080008e4

080001e8 <EXTI_LineConfig>:
#include "EXTI.h"

// HANGİ PORTTAN VE HANGİ PİNDEN VERİ GELECEĞİNİ KONFİGÜRE EDİYORUZ.

void EXTI_LineConfig(uint8_t PortSource, uint8_t EXTI_LineSource)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	460a      	mov	r2, r1
 80001f2:	71fb      	strb	r3, [r7, #7]
 80001f4:	4613      	mov	r3, r2
 80001f6:	71bb      	strb	r3, [r7, #6]
	uint32_t tempValue;
	// EXTI_LineSource'un 2 birim kaydırılmasıyla uygun register elde edilmiş olur.
	tempValue = SYSCFG->EXTI_CR[EXTI_LineSource >> 2U];
 80001f8:	4a13      	ldr	r2, [pc, #76]	; (8000248 <EXTI_LineConfig+0x60>)
 80001fa:	79bb      	ldrb	r3, [r7, #6]
 80001fc:	089b      	lsrs	r3, r3, #2
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	3302      	adds	r3, #2
 8000202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000206:	60fb      	str	r3, [r7, #12]
	// geçici değişkenin 4 bitini uygun bit numarası kadar temizliyoruz.
	tempValue &= (0xFU << (EXTI_LineSource & 0x3U)* 4);
 8000208:	79bb      	ldrb	r3, [r7, #6]
 800020a:	f003 0303 	and.w	r3, r3, #3
 800020e:	009b      	lsls	r3, r3, #2
 8000210:	220f      	movs	r2, #15
 8000212:	fa02 f303 	lsl.w	r3, r2, r3
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]
	//veri yazma işlemi
	tempValue = (PortSource << (EXTI_LineSource & 0x3U)* 4);
 800021c:	79fa      	ldrb	r2, [r7, #7]
 800021e:	79bb      	ldrb	r3, [r7, #6]
 8000220:	f003 0303 	and.w	r3, r3, #3
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	fa02 f303 	lsl.w	r3, r2, r3
 800022a:	60fb      	str	r3, [r7, #12]
	//Konfigüre edilen değere atama
	SYSCFG->EXTI_CR[EXTI_LineSource >> 2U] = tempValue;
 800022c:	4906      	ldr	r1, [pc, #24]	; (8000248 <EXTI_LineConfig+0x60>)
 800022e:	79bb      	ldrb	r3, [r7, #6]
 8000230:	089b      	lsrs	r3, r3, #2
 8000232:	b2db      	uxtb	r3, r3
 8000234:	3302      	adds	r3, #2
 8000236:	68fa      	ldr	r2, [r7, #12]
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40013800 	.word	0x40013800

0800024c <EXTI_Init>:

void EXTI_Init(EXTI_InitTypeDef_t *EXTI_InitStruct)
{
 800024c:	b480      	push	{r7}
 800024e:	b085      	sub	sp, #20
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	uint32_t tempValue =0;
 8000254:	2300      	movs	r3, #0
 8000256:	60fb      	str	r3, [r7, #12]
	tempValue = (uint32_t)EXTI_BASE_ADDR; //geçici değişken EXTI base adresini tutar.
 8000258:	4b43      	ldr	r3, [pc, #268]	; (8000368 <EXTI_Init+0x11c>)
 800025a:	60fb      	str	r3, [r7, #12]
	EXTI->IMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber); // IMR'deki veriyi temizledik
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <EXTI_Init+0x11c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	785b      	ldrb	r3, [r3, #1]
 8000264:	4619      	mov	r1, r3
 8000266:	2301      	movs	r3, #1
 8000268:	408b      	lsls	r3, r1
 800026a:	43db      	mvns	r3, r3
 800026c:	493e      	ldr	r1, [pc, #248]	; (8000368 <EXTI_Init+0x11c>)
 800026e:	4013      	ands	r3, r2
 8000270:	600b      	str	r3, [r1, #0]
	EXTI->EMR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber); // EMR'deki veriyi temizledik.
 8000272:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <EXTI_Init+0x11c>)
 8000274:	685a      	ldr	r2, [r3, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	785b      	ldrb	r3, [r3, #1]
 800027a:	4619      	mov	r1, r3
 800027c:	2301      	movs	r3, #1
 800027e:	408b      	lsls	r3, r1
 8000280:	43db      	mvns	r3, r3
 8000282:	4939      	ldr	r1, [pc, #228]	; (8000368 <EXTI_Init+0x11c>)
 8000284:	4013      	ands	r3, r2
 8000286:	604b      	str	r3, [r1, #4]
	if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d053      	beq.n	8000338 <EXTI_Init+0xec>
	{
		tempValue += EXTI_InitStruct->EXTI_Mode; //geçici değişkene mode bilgisi eklendi
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	78db      	ldrb	r3, [r3, #3]
 8000294:	461a      	mov	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	4413      	add	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber); // veri yazma işlemi yapıldı.
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	6819      	ldr	r1, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2301      	movs	r3, #1
 80002a8:	fa03 f202 	lsl.w	r2, r3, r2
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	430a      	orrs	r2, r1
 80002b0:	601a      	str	r2, [r3, #0]
		tempValue = (uint32_t)EXTI_BASE_ADDR; // temp değeri değişti yeniden eski haline getirilir
 80002b2:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <EXTI_Init+0x11c>)
 80002b4:	60fb      	str	r3, [r7, #12]
		EXTI->RTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber); // RTSR üzerinde clear işlemi yapıldı
 80002b6:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <EXTI_Init+0x11c>)
 80002b8:	689a      	ldr	r2, [r3, #8]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	785b      	ldrb	r3, [r3, #1]
 80002be:	4619      	mov	r1, r3
 80002c0:	2301      	movs	r3, #1
 80002c2:	408b      	lsls	r3, r1
 80002c4:	43db      	mvns	r3, r3
 80002c6:	4928      	ldr	r1, [pc, #160]	; (8000368 <EXTI_Init+0x11c>)
 80002c8:	4013      	ands	r3, r2
 80002ca:	608b      	str	r3, [r1, #8]
		EXTI->FTSR &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber); // FTSR üzerinde clear işlemi yapıldı
 80002cc:	4b26      	ldr	r3, [pc, #152]	; (8000368 <EXTI_Init+0x11c>)
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	785b      	ldrb	r3, [r3, #1]
 80002d4:	4619      	mov	r1, r3
 80002d6:	2301      	movs	r3, #1
 80002d8:	408b      	lsls	r3, r1
 80002da:	43db      	mvns	r3, r3
 80002dc:	4922      	ldr	r1, [pc, #136]	; (8000368 <EXTI_Init+0x11c>)
 80002de:	4013      	ands	r3, r2
 80002e0:	60cb      	str	r3, [r1, #12]
		if(EXTI_InitStruct->TriggerSelection == EXTI_Trigger_RF) //iki durumunda aktif olması isteniyorsa
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	789b      	ldrb	r3, [r3, #2]
 80002e6:	2b10      	cmp	r3, #16
 80002e8:	d114      	bne.n	8000314 <EXTI_Init+0xc8>
		{
			EXTI->RTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002ea:	4b1f      	ldr	r3, [pc, #124]	; (8000368 <EXTI_Init+0x11c>)
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	785b      	ldrb	r3, [r3, #1]
 80002f2:	4619      	mov	r1, r3
 80002f4:	2301      	movs	r3, #1
 80002f6:	408b      	lsls	r3, r1
 80002f8:	491b      	ldr	r1, [pc, #108]	; (8000368 <EXTI_Init+0x11c>)
 80002fa:	4313      	orrs	r3, r2
 80002fc:	608b      	str	r3, [r1, #8]
			EXTI->FTSR |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <EXTI_Init+0x11c>)
 8000300:	68da      	ldr	r2, [r3, #12]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4619      	mov	r1, r3
 8000308:	2301      	movs	r3, #1
 800030a:	408b      	lsls	r3, r1
 800030c:	4916      	ldr	r1, [pc, #88]	; (8000368 <EXTI_Init+0x11c>)
 800030e:	4313      	orrs	r3, r2
 8000310:	60cb      	str	r3, [r1, #12]
	{
		tempValue = (uint32_t)EXTI_BASE_ADDR;
		tempValue += EXTI_InitStruct->EXTI_Mode;
		*((__IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
	}
}
 8000312:	e024      	b.n	800035e <EXTI_Init+0x112>
			tempValue += EXTI_InitStruct->TriggerSelection;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	789b      	ldrb	r3, [r3, #2]
 8000318:	461a      	mov	r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	4413      	add	r3, r2
 800031e:	60fb      	str	r3, [r7, #12]
			*((__IO uint32_t*)tempValue) |= (0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	6819      	ldr	r1, [r3, #0]
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	461a      	mov	r2, r3
 800032a:	2301      	movs	r3, #1
 800032c:	fa03 f202 	lsl.w	r2, r3, r2
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	430a      	orrs	r2, r1
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	e012      	b.n	800035e <EXTI_Init+0x112>
		tempValue = (uint32_t)EXTI_BASE_ADDR;
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <EXTI_Init+0x11c>)
 800033a:	60fb      	str	r3, [r7, #12]
		tempValue += EXTI_InitStruct->EXTI_Mode;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	78db      	ldrb	r3, [r3, #3]
 8000340:	461a      	mov	r2, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	4413      	add	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
		*((__IO uint32_t*)tempValue) &= ~(0x1U << EXTI_InitStruct->EXTI_LineNumber);
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	6819      	ldr	r1, [r3, #0]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	785b      	ldrb	r3, [r3, #1]
 8000350:	461a      	mov	r2, r3
 8000352:	2301      	movs	r3, #1
 8000354:	4093      	lsls	r3, r2
 8000356:	43da      	mvns	r2, r3
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	400a      	ands	r2, r1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	40013c00 	.word	0x40013c00

0800036c <NVIC_EnableInterrupt>:

//NVIC KONFİGÜRASYONLARI BURADA YAPILIR
void NVIC_EnableInterrupt(IRQNumber_TypeDef_t IRQNumber){ //register okuma işlemi yapılır. Okuma işleminden sonra veri yazılır
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	uint32_t tempValue = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
	tempValue = *((IRQNumber >> 5U) + NVIC_ISER0); //registerden veriyi IRQ numarasına göre çektik.
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	095b      	lsrs	r3, r3, #5
 800037e:	b2db      	uxtb	r3, r3
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000386:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60fb      	str	r3, [r7, #12]
	tempValue &= ~(0x1U << (IRQNumber & 0x1FU)); // IRQ numarasına göre uygun bit numarasını bulup clear işlemi yapıldı.
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 031f 	and.w	r3, r3, #31
 8000394:	2201      	movs	r2, #1
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	43db      	mvns	r3, r3
 800039c:	68fa      	ldr	r2, [r7, #12]
 800039e:	4013      	ands	r3, r2
 80003a0:	60fb      	str	r3, [r7, #12]
	tempValue |= (0x1U << (IRQNumber & 0x1FU)); // uygun bite 1 yazdık
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 031f 	and.w	r3, r3, #31
 80003a8:	2201      	movs	r2, #1
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
	*((IRQNumber >> 5U)+ NVIC_ISER0) = tempValue; // okunan veriyi tempValue'ya atadık
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	095b      	lsrs	r3, r3, #5
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80003c0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr

080003d2 <GPIO_Init>:
#include "GPIO.h"

void GPIO_Init(GPIO_TypeDef_t *GPIOx, GPIO_InitTypeDef_t *GPIO_ConfigStruct)
{
 80003d2:	b480      	push	{r7}
 80003d4:	b087      	sub	sp, #28
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	6039      	str	r1, [r7, #0]
	//her bir pin numarası üzerinde gezinmesi gerekir.
	uint32_t position;
	uint32_t fakePosition =0;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
	uint32_t lastPosition=0;
 80003e0:	2300      	movs	r3, #0
 80003e2:	60fb      	str	r3, [r7, #12]
	for(position = 0; position < 16; position++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	617b      	str	r3, [r7, #20]
 80003e8:	e09e      	b.n	8000528 <GPIO_Init+0x156>
	{
		fakePosition = (0x1 << position);	// 0000 0000 0000 0001 oluşturuldu
 80003ea:	2201      	movs	r2, #1
 80003ec:	697b      	ldr	r3, [r7, #20]
 80003ee:	fa02 f303 	lsl.w	r3, r2, r3
 80003f2:	613b      	str	r3, [r7, #16]
		lastPosition = (uint32_t)(GPIO_ConfigStruct->pinNumber) & fakePosition; // yukarıdaki sayi ile pin numarasını AND işlemine aldık
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	693a      	ldr	r2, [r7, #16]
 80003fa:	4013      	ands	r3, r2
 80003fc:	60fb      	str	r3, [r7, #12]
		if(fakePosition == lastPosition) //iki değer eşitse pin girilmiş demektir ve kullanıcı tarafından konfigüre edilmeye ihtiyacı vardır.
 80003fe:	693a      	ldr	r2, [r7, #16]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	429a      	cmp	r2, r3
 8000404:	f040 808d 	bne.w	8000522 <GPIO_Init+0x150>
		{
			// MODE CONFIG
			uint32_t tempValue = GPIOx -> MODER; // GPIOx, mod register okundu
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position*2)); //bitwise nor kullanarak  ilgili pinin  clear işlemi sağlandı.
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	005b      	lsls	r3, r3, #1
 8000412:	2203      	movs	r2, #3
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	43db      	mvns	r3, r3
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	4013      	ands	r3, r2
 800041e:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct -> Mode << (position * 2)); // struct yapısındaki mode bilgisine göre konfigürasyon sağlandı.
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	685a      	ldr	r2, [r3, #4]
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	fa02 f303 	lsl.w	r3, r2, r3
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
			GPIOx -> MODER = tempValue;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	68ba      	ldr	r2, [r7, #8]
 8000436:	601a      	str	r2, [r3, #0]

			if (GPIO_ConfigStruct -> Mode == GPIO_MODE_INPUT || GPIO_ConfigStruct -> Mode == GPIO_MODE_ANALOG)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d003      	beq.n	8000448 <GPIO_Init+0x76>
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	2b03      	cmp	r3, #3
 8000446:	d12d      	bne.n	80004a4 <GPIO_Init+0xd2>
			{
				// OUTPUT TYPE CONFIG
				tempValue = GPIOx -> OTYPER;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x1U << position);
 800044e:	2201      	movs	r2, #1
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	43db      	mvns	r3, r3
 8000458:	68ba      	ldr	r2, [r7, #8]
 800045a:	4013      	ands	r3, r2
 800045c:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct ->Otype << position);
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	4313      	orrs	r3, r2
 800046c:	60bb      	str	r3, [r7, #8]
				GPIOx->OTYPER = tempValue;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	68ba      	ldr	r2, [r7, #8]
 8000472:	605a      	str	r2, [r3, #4]

				//OSPEED REGİSTER
				tempValue = GPIOx -> OSPEEDR;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	60bb      	str	r3, [r7, #8]
				tempValue &= ~(0x3U << (position *2));
 800047a:	697b      	ldr	r3, [r7, #20]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	2203      	movs	r2, #3
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	68ba      	ldr	r2, [r7, #8]
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Speed << (position *2));
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	691a      	ldr	r2, [r3, #16]
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	005b      	lsls	r3, r3, #1
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	4313      	orrs	r3, r2
 800049c:	60bb      	str	r3, [r7, #8]
				GPIOx->OSPEEDR = tempValue;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	68ba      	ldr	r2, [r7, #8]
 80004a2:	609a      	str	r2, [r3, #8]
			}

			//PUPDR REGISTER
			tempValue = GPIOx->PUPDR;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	60bb      	str	r3, [r7, #8]
			tempValue &= ~(0x3U << (position *2));
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	2203      	movs	r2, #3
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	43db      	mvns	r3, r3
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	4013      	ands	r3, r2
 80004ba:	60bb      	str	r3, [r7, #8]
			tempValue |= (GPIO_ConfigStruct->PuPd << (position *2));
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	fa02 f303 	lsl.w	r3, r2, r3
 80004c8:	68ba      	ldr	r2, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	60bb      	str	r3, [r7, #8]
			GPIOx->PUPDR = tempValue;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68ba      	ldr	r2, [r7, #8]
 80004d2:	60da      	str	r2, [r3, #12]

			// ALTERNATE FUNCTION
			if(GPIO_ConfigStruct->Mode == GPIO_MODE_AF)
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d122      	bne.n	8000522 <GPIO_Init+0x150>
			{
				tempValue = GPIOx->AFR[position >> 3U]; // 3 bit sağa kaydırmak 8 'e bölmek demektir. 0 olursa low, 1 olursa high
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	08da      	lsrs	r2, r3, #3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	3208      	adds	r2, #8
 80004e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e8:	60bb      	str	r3, [r7, #8]
				tempValue &=  ~(0xFU << ((position & 0x7U)*4)); // 8'e göre mod alma işlemi yapılır, ilgili yer temizlenir.
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	f003 0307 	and.w	r3, r3, #7
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	220f      	movs	r2, #15
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
				tempValue |= (GPIO_ConfigStruct->Alternate << ((position & 0x7U) *4));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	4313      	orrs	r3, r2
 8000514:	60bb      	str	r3, [r7, #8]
				GPIOx->AFR[position >> 3U] >> tempValue; //registera konfigüre edilen değer verilir.
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	08da      	lsrs	r2, r3, #3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3208      	adds	r2, #8
 800051e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	for(position = 0; position < 16; position++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b0f      	cmp	r3, #15
 800052c:	f67f af5d 	bls.w	80003ea <GPIO_Init+0x18>
			}
		}

	}
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	371c      	adds	r7, #28
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <SPI_Init>:
		SPI_CloseISR_TX(SPI_Handle);
	}
}

void SPI_Init(SPI_HandleTypeDef_t *SPI_Handle)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	uint32_t tempValue = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60fb      	str	r3, [r7, #12]
	tempValue = SPI_Handle->Instance->CR1; //CR1 registerı handle'dan çekildi ve geçici değişkene atandı.
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	60fb      	str	r3, [r7, #12]
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.DFF_Format)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	691a      	ldr	r2, [r3, #16]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	431a      	orrs	r2, r3
			| (SPI_Handle->Init.Mode) | (SPI_Handle->Init.FrameFormat) | (SPI_Handle->Init.BusConfig) | (SPI_Handle->Init.SSM_Cmd);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	431a      	orrs	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	69db      	ldr	r3, [r3, #28]
 8000570:	431a      	orrs	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4313      	orrs	r3, r2
	tempValue |= (SPI_Handle->Init.BaudRate) | (SPI_Handle->Init.CPHA) | (SPI_Handle->Init.DFF_Format)
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	4313      	orrs	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
	SPI_Handle->Instance->CR1 = tempValue;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <SPI_PeriphCmd>:

void SPI_PeriphCmd(SPI_HandleTypeDef_t *SPI_Handle, FunctionalState_t stateOfSPI)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
	if(stateOfSPI == ENABLE)
 800059c:	78fb      	ldrb	r3, [r7, #3]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d108      	bne.n	80005b4 <SPI_PeriphCmd+0x24>
	{
		SPI_Handle->Instance->CR1 |= (0x1U << SPI_CR1_SPE);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
	}
}
 80005b2:	e007      	b.n	80005c4 <SPI_PeriphCmd+0x34>
		SPI_Handle->Instance->CR1 &= ~(0x1U << SPI_CR1_SPE);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80005c2:	601a      	str	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <SPI_InterruptHandler>:

}

// INTERRUPT'IN DOĞRU YERE GELİP GELMEDİĞİ KONTROL EDİLİR.
void SPI_InterruptHandler(SPI_HandleTypeDef_t *SPI_Handle)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b084      	sub	sp, #16
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	uint8_t interruptSource = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
	uint8_t interruptFlag = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	73bb      	strb	r3, [r7, #14]
	interruptSource = SPI_Handle->Instance->CR2 & (0x1U << SPI_CR2_TXEIE); // TXEIE INTERRUPT FLAG' I ENABLE İSE 1 YAP
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80005ea:	73fb      	strb	r3, [r7, #15]
	interruptFlag = SPI_Handle->Instance->SR & (0x1U << SPI_SR_TxE);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	73bb      	strb	r3, [r7, #14]
	if((interruptSource != 0) && (interruptFlag != 0 ))
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d006      	beq.n	800060e <SPI_InterruptHandler+0x40>
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <SPI_InterruptHandler+0x40>
	{
		SPI_Handle->TxISRFunction(SPI_Handle);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	4798      	blx	r3
	}
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <main>:

SPI_HandleTypeDef_t SPI_Handle;


int main(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
int main(void)
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	607b      	str	r3, [r7, #4]
GPIO_LedConfig();
 8000622:	f000 f807 	bl	8000634 <GPIO_LedConfig>
//GPIO_LockPin(GPIOA, GPIO_PIN_0);
//LockControl();
GPIO_ButtonInterruptConfig();
 8000626:	f000 f867 	bl	80006f8 <GPIO_ButtonInterruptConfig>
SPI_GPIO_Config();
 800062a:	f000 f8d9 	bl	80007e0 <SPI_GPIO_Config>
SPI_Config();
 800062e:	f000 f89b 	bl	8000768 <SPI_Config>
		//ISR FONKSİYONLAR HANDLER MODDA ÇALIŞIR.

		SPI_TransmitData_IT(&SPI_Handle, (uint8_t*)messageToSend, strlen(messageToSend));
	}
}
	for(;;)
 8000632:	e7fe      	b.n	8000632 <main+0x1c>

08000634 <GPIO_LedConfig>:
		}*/
	}
}

static void GPIO_LedConfig()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef_t GPIO_InitStruct = { 0 };
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
	RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a26      	ldr	r2, [pc, #152]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <GPIO_LedConfig+0xb8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_GPIOD_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
 8000668:	4b20      	ldr	r3, [pc, #128]	; (80006ec <GPIO_LedConfig+0xb8>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <GPIO_LedConfig+0xb8>)
 800066e:	f043 0308 	orr.w	r3, r3, #8
 8000672:	6313      	str	r3, [r2, #48]	; 0x30
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	623b      	str	r3, [r7, #32]
	RCC_SYSCFG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a19      	ldr	r2, [pc, #100]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <GPIO_LedConfig+0xb8>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000696:	61fb      	str	r3, [r7, #28]


	GPIO_InitStruct.pinNumber = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000698:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800069c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
 800069e:	2301      	movs	r3, #1
 80006a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Otype = GPIO_OTYPE_PP;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4619      	mov	r1, r3
 80006b2:	480f      	ldr	r0, [pc, #60]	; (80006f0 <GPIO_LedConfig+0xbc>)
 80006b4:	f7ff fe8d 	bl	80003d2 <GPIO_Init>
	memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2218      	movs	r2, #24
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f908 	bl	80008d4 <memset>

	GPIO_InitStruct.pinNumber = GPIO_PIN_0;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd = GPIO_PUPD_PULLDOWN;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	4619      	mov	r1, r3
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <GPIO_LedConfig+0xc0>)
 80006d6:	f7ff fe7c 	bl	80003d2 <GPIO_Init>


	EXTI_LineConfig(EXTI_PortSource_GPIOC, EXTI_LineSource_7);
 80006da:	2107      	movs	r1, #7
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff fd83 	bl	80001e8 <EXTI_LineConfig>
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020c00 	.word	0x40020c00
 80006f4:	40020000 	.word	0x40020000

080006f8 <GPIO_ButtonInterruptConfig>:
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT;
	GPIO_InitStruct.PuPd = GPIO_PUPD_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStruct);
}
static void GPIO_ButtonInterruptConfig()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b18      	ldr	r3, [pc, #96]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b15      	ldr	r3, [pc, #84]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
	EXTI_InitTypeDef_t EXTI_InitStruct = {0};
 8000718:	2300      	movs	r3, #0
 800071a:	607b      	str	r3, [r7, #4]
	RCC_SYSCFG_CLK_ENABLE();
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 8000722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6453      	str	r3, [r2, #68]	; 0x44
 800072c:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <GPIO_ButtonInterruptConfig+0x6c>)
 800072e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000734:	60bb      	str	r3, [r7, #8]
	EXTI_LineConfig(EXTI_PortSource_GPIOA, EXTI_LineSource_0);
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fd55 	bl	80001e8 <EXTI_LineConfig>
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	713b      	strb	r3, [r7, #4]
	EXTI_InitStruct.EXTI_LineNumber = EXTI_LineSource_0;
 8000742:	2300      	movs	r3, #0
 8000744:	717b      	strb	r3, [r7, #5]
	EXTI_InitStruct.EXTI_Mode = EXTI_MODE_Interrupt;
 8000746:	2300      	movs	r3, #0
 8000748:	71fb      	strb	r3, [r7, #7]
	EXTI_InitStruct.TriggerSelection = EXTI_Trigger_Rising;
 800074a:	2308      	movs	r3, #8
 800074c:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&EXTI_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd7b 	bl	800024c <EXTI_Init>
	NVIC_EnableInterrupt(EXTI0_IRQNumber);
 8000756:	2006      	movs	r0, #6
 8000758:	f7ff fe08 	bl	800036c <NVIC_EnableInterrupt>
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800

08000768 <SPI_Config>:

static void SPI_Config()
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	; 0x38
 800076c:	af00      	add	r7, sp, #0
	RCC_SPI1_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <SPI_Config+0x70>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <SPI_Config+0x70>)
 8000778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <SPI_Config+0x70>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_HandleTypeDef_t SPI_Handle = {0};
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2230      	movs	r2, #48	; 0x30
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f8a0 	bl	80008d4 <memset>
	SPI_Handle.Instance = SPI1; //SPI1'i konfigüre ediyoruz.
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <SPI_Config+0x74>)
 8000796:	607b      	str	r3, [r7, #4]
	SPI_Handle.Init.BaudRate = SPI_BAUDRATE_DIV8; //2 MHZ
 8000798:	2310      	movs	r3, #16
 800079a:	617b      	str	r3, [r7, #20]
	SPI_Handle.Init.BusConfig = SPI_BUS_FullDublex;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
	SPI_Handle.Init.CPHA = SPI_CPHA_FIRST;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
	SPI_Handle.Init.CPOL = SPI_CPOL_LOW;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
	SPI_Handle.Init.DFF_Format = SPI_DFF_8BITS;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
	SPI_Handle.Init.Mode = SPI_MODE_MASTER;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
	SPI_Handle.Init.SSM_Cmd = SPI_SSM_ENABLE;
 80007b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b4:	61bb      	str	r3, [r7, #24]

	SPI_Init(&SPI_Handle);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff febf 	bl	800053c <SPI_Init>
	SPI_PeriphCmd(&SPI_Handle, ENABLE);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2101      	movs	r1, #1
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fee4 	bl	8000590 <SPI_PeriphCmd>
	NVIC_EnableInterrupt(SPI1_IRQNumber);
 80007c8:	2023      	movs	r0, #35	; 0x23
 80007ca:	f7ff fdcf 	bl	800036c <NVIC_EnableInterrupt>
}
 80007ce:	bf00      	nop
 80007d0:	3738      	adds	r7, #56	; 0x38
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40013000 	.word	0x40013000

080007e0 <SPI_GPIO_Config>:
static void SPI_GPIO_Config()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef_t GPIO_InitStruct = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
 80007f4:	615a      	str	r2, [r3, #20]
	GPIO_InitStruct.pinNumber = GPIO_PIN_5 | GPIO_PIN_7; //PA5 SCK - PA7
 80007f6:	23a0      	movs	r3, #160	; 0xa0
 80007f8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode  = GPIO_MODE_AF;
 80007fa:	2302      	movs	r3, #2
 80007fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Otype  = GPIO_OTYPE_PP;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.PuPd  = GPIO_PUPD_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed  = GPIO_SPEED_VERY;
 8000806:	2303      	movs	r3, #3
 8000808:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF5;
 800080a:	2305      	movs	r3, #5
 800080c:	617b      	str	r3, [r7, #20]

	GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <SPI_GPIO_Config+0x40>)
 8000814:	f7ff fddd 	bl	80003d2 <GPIO_Init>

}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40020000 	.word	0x40020000

08000824 <SPI1_IRQHandler>:

void SPI1_IRQHandler()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	SPI_InterruptHandler(&SPI_Handle);
 8000828:	4802      	ldr	r0, [pc, #8]	; (8000834 <SPI1_IRQHandler+0x10>)
 800082a:	f7ff fed0 	bl	80005ce <SPI_InterruptHandler>
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000001c 	.word	0x2000001c

08000838 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800083a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800083c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <LoopForever+0x6>)
  ldr r1, =_edata
 8000842:	490d      	ldr	r1, [pc, #52]	; (8000878 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000844:	4a0d      	ldr	r2, [pc, #52]	; (800087c <LoopForever+0xe>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000848:	e002      	b.n	8000850 <LoopCopyDataInit>

0800084a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800084c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084e:	3304      	adds	r3, #4

08000850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000854:	d3f9      	bcc.n	800084a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000858:	4c0a      	ldr	r4, [pc, #40]	; (8000884 <LoopForever+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800085c:	e001      	b.n	8000862 <LoopFillZerobss>

0800085e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000860:	3204      	adds	r2, #4

08000862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000864:	d3fb      	bcc.n	800085e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000866:	f000 f811 	bl	800088c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800086a:	f7ff fed4 	bl	8000616 <main>

0800086e <LoopForever>:

LoopForever:
    b LoopForever
 800086e:	e7fe      	b.n	800086e <LoopForever>
  ldr   r0, =_estack
 8000870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000878:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800087c:	08000904 	.word	0x08000904
  ldr r2, =_sbss
 8000880:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000884:	2000004c 	.word	0x2000004c

08000888 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000888:	e7fe      	b.n	8000888 <ADC_IRQHandler>
	...

0800088c <__libc_init_array>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	4d0d      	ldr	r5, [pc, #52]	; (80008c4 <__libc_init_array+0x38>)
 8000890:	4c0d      	ldr	r4, [pc, #52]	; (80008c8 <__libc_init_array+0x3c>)
 8000892:	1b64      	subs	r4, r4, r5
 8000894:	10a4      	asrs	r4, r4, #2
 8000896:	2600      	movs	r6, #0
 8000898:	42a6      	cmp	r6, r4
 800089a:	d109      	bne.n	80008b0 <__libc_init_array+0x24>
 800089c:	4d0b      	ldr	r5, [pc, #44]	; (80008cc <__libc_init_array+0x40>)
 800089e:	4c0c      	ldr	r4, [pc, #48]	; (80008d0 <__libc_init_array+0x44>)
 80008a0:	f000 f820 	bl	80008e4 <_init>
 80008a4:	1b64      	subs	r4, r4, r5
 80008a6:	10a4      	asrs	r4, r4, #2
 80008a8:	2600      	movs	r6, #0
 80008aa:	42a6      	cmp	r6, r4
 80008ac:	d105      	bne.n	80008ba <__libc_init_array+0x2e>
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
 80008b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b4:	4798      	blx	r3
 80008b6:	3601      	adds	r6, #1
 80008b8:	e7ee      	b.n	8000898 <__libc_init_array+0xc>
 80008ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80008be:	4798      	blx	r3
 80008c0:	3601      	adds	r6, #1
 80008c2:	e7f2      	b.n	80008aa <__libc_init_array+0x1e>
 80008c4:	080008fc 	.word	0x080008fc
 80008c8:	080008fc 	.word	0x080008fc
 80008cc:	080008fc 	.word	0x080008fc
 80008d0:	08000900 	.word	0x08000900

080008d4 <memset>:
 80008d4:	4402      	add	r2, r0
 80008d6:	4603      	mov	r3, r0
 80008d8:	4293      	cmp	r3, r2
 80008da:	d100      	bne.n	80008de <memset+0xa>
 80008dc:	4770      	bx	lr
 80008de:	f803 1b01 	strb.w	r1, [r3], #1
 80008e2:	e7f9      	b.n	80008d8 <memset+0x4>

080008e4 <_init>:
 80008e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008e6:	bf00      	nop
 80008e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008ea:	bc08      	pop	{r3}
 80008ec:	469e      	mov	lr, r3
 80008ee:	4770      	bx	lr

080008f0 <_fini>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr
